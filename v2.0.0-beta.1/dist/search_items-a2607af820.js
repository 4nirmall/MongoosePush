searchNodes=[{"doc":"Generate fake certs (placeholders) for HTTPS endpoint and APNS service. Please be aware that APNS requires valid Apple Developer certificates, so it will not accept those fake certificates. Generated certificates may be used only with mock APNS service (like one provided by docker mobify/apns-http2-mock-server).","ref":"Mix.Tasks.Certs.Dev.html","title":"Mix.Tasks.Certs.Dev","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1.","ref":"Mix.Tasks.Certs.Dev.html#run/1","title":"Mix.Tasks.Certs.Dev.run/1","type":"function"},{"doc":"This task compiles all ASN.1 files (in asn1/*.asn) into erlang sources into src directory. After that Erlang compiler (task Compile.Erlang) shall be run to compile them into .beam binaries.","ref":"Mix.Tasks.Compile.Asn1.html","title":"Mix.Tasks.Compile.Asn1","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1.","ref":"Mix.Tasks.Compile.Asn1.html#run/1","title":"Mix.Tasks.Compile.Asn1.run/1","type":"function"},{"doc":"","ref":"Mix.Tasks.Test.Env.Down.html","title":"Mix.Tasks.Test.Env.Down","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1.","ref":"Mix.Tasks.Test.Env.Down.html#run/1","title":"Mix.Tasks.Test.Env.Down.run/1","type":"function"},{"doc":"","ref":"Mix.Tasks.Test.Env.Up.html","title":"Mix.Tasks.Test.Env.Up","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1.","ref":"Mix.Tasks.Test.Env.Up.html#run/1","title":"Mix.Tasks.Test.Env.Up.run/1","type":"function"},{"doc":"","ref":"Mix.Tasks.Test.Env.Utils.html","title":"Mix.Tasks.Test.Env.Utils","type":"task"},{"doc":"","ref":"Mix.Tasks.Test.Env.Utils.html#compose/2","title":"Mix.Tasks.Test.Env.Utils.compose/2","type":"function"},{"doc":"","ref":"Mix.Tasks.Test.Env.Utils.html#flunk/1","title":"Mix.Tasks.Test.Env.Utils.flunk/1","type":"function"},{"doc":"","ref":"Mix.Tasks.Test.Env.Utils.html#wait_for_services/1","title":"Mix.Tasks.Test.Env.Utils.wait_for_services/1","type":"function"},{"doc":"","ref":"Mix.Tasks.Test.Env.Wait.html","title":"Mix.Tasks.Test.Env.Wait","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1.","ref":"Mix.Tasks.Test.Env.Wait.html#run/1","title":"Mix.Tasks.Test.Env.Wait.run/1","type":"function"},{"doc":"MongoosePush is simple (seriously) service providing ability to send push notification to FCM (Firebase Cloud Messaging) and/or APNS (Apple Push Notification Service). What makes it cool is not only simplicity but also support for newest and fastest HTTP/2 based APIs for both services. At this moment only those two services are supported but in future MongoosePush may and probably will support even more Push Notification Services.","ref":"MongoosePush.html","title":"MongoosePush","type":"module"},{"doc":"Push notification defined by request to device with device_id. request has to define at least :service type (:fcm or :apns) and at least one of :alert or :data. If alert is not present, the notification will be send as &#39;silent&#39;. Please refer to yours push notification service provider&#39;s documentation for more details on silent notifications. Field :data may contain any custom data that have to be delivered to the target device, while field :alert, if present, must contain at least :title and :body. The :alert field may also contain: :sound, :tag (option specific to FCM service), :topic and :bagde (specific to APNS). Please consult push notification service provider&#39;s documentation for more informations on those optional fields. Field :priority may be used to set priority for message on both FCM and APNS. The values are native for FCM and for APNS - :normal is &quot;5&quot; and :high is 10. :mode option is also specific to APNS but it only selects appropriate worker pool (with :mode set to either :prod or :dev). Default value to :mode is :prod. Field :mutable_content (specific to APNS) can be set to true (by default false) to enable this feature (please consult APNS documentation for more information).","ref":"MongoosePush.html#push/2","title":"MongoosePush.push/2","type":"function"},{"doc":"","ref":"MongoosePush.html#t:alert/0","title":"MongoosePush.alert/0","type":"type"},{"doc":"","ref":"MongoosePush.html#t:alert_key/0","title":"MongoosePush.alert_key/0","type":"type"},{"doc":"","ref":"MongoosePush.html#t:data/0","title":"MongoosePush.data/0","type":"type"},{"doc":"","ref":"MongoosePush.html#t:data_key/0","title":"MongoosePush.data_key/0","type":"type"},{"doc":"","ref":"MongoosePush.html#t:error/0","title":"MongoosePush.error/0","type":"type"},{"doc":"","ref":"MongoosePush.html#t:mode/0","title":"MongoosePush.mode/0","type":"type"},{"doc":"Available keys in request map","ref":"MongoosePush.html#t:req_key/0","title":"MongoosePush.req_key/0","type":"type"},{"doc":"Raw push request. The keys: :service and at least one of :alert or :body are required","ref":"MongoosePush.html#t:request/0","title":"MongoosePush.request/0","type":"type"},{"doc":"","ref":"MongoosePush.html#t:service/0","title":"MongoosePush.service/0","type":"type"},{"doc":"","ref":"MongoosePush.API.html","title":"MongoosePush.API","type":"behaviour"},{"doc":"","ref":"MongoosePush.API.html#c:to_status/1","title":"MongoosePush.API.to_status/1","type":"callback"},{"doc":"Module for handling internal responses to V1 HTTP2 codes","ref":"MongoosePush.API.V1.ResponseEncoder.html","title":"MongoosePush.API.V1.ResponseEncoder","type":"module"},{"doc":"Callback implementation for MongoosePush.API.to_status/1.","ref":"MongoosePush.API.V1.ResponseEncoder.html#to_status/1","title":"MongoosePush.API.V1.ResponseEncoder.to_status/1","type":"function"},{"doc":"Module for handling internal responses to V2 HTTP2 codes","ref":"MongoosePush.API.V2.ResponseEncoder.html","title":"MongoosePush.API.V2.ResponseEncoder","type":"module"},{"doc":"Callback implementation for MongoosePush.API.to_status/1.","ref":"MongoosePush.API.V2.ResponseEncoder.html#to_status/1","title":"MongoosePush.API.V2.ResponseEncoder.to_status/1","type":"function"},{"doc":"Module for handling internal responses to V3 HTTP2 codes","ref":"MongoosePush.API.V3.ResponseEncoder.html","title":"MongoosePush.API.V3.ResponseEncoder","type":"module"},{"doc":"Callback implementation for MongoosePush.API.to_status/1.","ref":"MongoosePush.API.V3.ResponseEncoder.html#to_status/1","title":"MongoosePush.API.V3.ResponseEncoder.to_status/1","type":"function"},{"doc":"","ref":"MongoosePush.Config.Provider.Confex.html","title":"MongoosePush.Config.Provider.Confex","type":"module"},{"doc":"Callback implementation for Distillery.Releases.Config.Provider.init/1.","ref":"MongoosePush.Config.Provider.Confex.html#init/1","title":"MongoosePush.Config.Provider.Confex.init/1","type":"function"},{"doc":"","ref":"MongoosePush.Config.Provider.Toml.html","title":"MongoosePush.Config.Provider.Toml","type":"module"},{"doc":"Callback implementation for Distillery.Releases.Config.Provider.init/1.","ref":"MongoosePush.Config.Provider.Toml.html#init/1","title":"MongoosePush.Config.Provider.Toml.init/1","type":"function"},{"doc":"","ref":"MongoosePush.Config.Provider.Toml.html#update_sysconfig/2","title":"MongoosePush.Config.Provider.Toml.update_sysconfig/2","type":"function"},{"doc":"","ref":"MongoosePush.Config.Utils.html","title":"MongoosePush.Config.Utils","type":"module"},{"doc":"Used by prod.exs to parse env variables to inet-style IP addresses","ref":"MongoosePush.Config.Utils.html#parse_bind_addr/1","title":"MongoosePush.Config.Utils.parse_bind_addr/1","type":"function"},{"doc":"Common logs formatters&#39; helper functions","ref":"MongoosePush.Logger.Common.html","title":"MongoosePush.Logger.Common","type":"module"},{"doc":"","ref":"MongoosePush.Logger.Common.html#flatten_metadata/1","title":"MongoosePush.Logger.Common.flatten_metadata/1","type":"function"},{"doc":"Module responsible for JSON-specific logs formatting","ref":"MongoosePush.Logger.JSON.html","title":"MongoosePush.Logger.JSON","type":"module"},{"doc":"","ref":"MongoosePush.Logger.JSON.html#format/4","title":"MongoosePush.Logger.JSON.format/4","type":"function"},{"doc":"Module responsible for FMT-specific logs formatting","ref":"MongoosePush.Logger.LogFmt.html","title":"MongoosePush.Logger.LogFmt","type":"module"},{"doc":"","ref":"MongoosePush.Logger.LogFmt.html#format/4","title":"MongoosePush.Logger.LogFmt.format/4","type":"function"},{"doc":"Module responsible for updating Telemetry metrics","ref":"MongoosePush.Metrics.TelemetryMetrics.html","title":"MongoosePush.Metrics.TelemetryMetrics","type":"module"},{"doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#child_spec/1","title":"MongoosePush.Metrics.TelemetryMetrics.child_spec/1","type":"function"},{"doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#metrics/0","title":"MongoosePush.Metrics.TelemetryMetrics.metrics/0","type":"function"},{"doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#periodic_measurements/0","title":"MongoosePush.Metrics.TelemetryMetrics.periodic_measurements/0","type":"function"},{"doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#pooler/0","title":"MongoosePush.Metrics.TelemetryMetrics.pooler/0","type":"function"},{"doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#running_pools/0","title":"MongoosePush.Metrics.TelemetryMetrics.running_pools/0","type":"function"},{"doc":"Generic interface for push notifications services.","ref":"MongoosePush.Service.html","title":"MongoosePush.Service","type":"behaviour"},{"doc":"","ref":"MongoosePush.Service.html#c:choose_pool/2","title":"MongoosePush.Service.choose_pool/2","type":"callback"},{"doc":"","ref":"MongoosePush.Service.html#c:prepare_notification/3","title":"MongoosePush.Service.prepare_notification/3","type":"callback"},{"doc":"","ref":"MongoosePush.Service.html#c:push/4","title":"MongoosePush.Service.push/4","type":"callback"},{"doc":"","ref":"MongoosePush.Service.html#c:supervisor_entry/1","title":"MongoosePush.Service.supervisor_entry/1","type":"callback"},{"doc":"Error tuple with unified internal representation and exact reason returned by service","ref":"MongoosePush.Service.html#t:error/0","title":"MongoosePush.Service.error/0","type":"type"},{"doc":"","ref":"MongoosePush.Service.html#t:error_reason/0","title":"MongoosePush.Service.error_reason/0","type":"type"},{"doc":"","ref":"MongoosePush.Service.html#t:error_type/0","title":"MongoosePush.Service.error_type/0","type":"type"},{"doc":"","ref":"MongoosePush.Service.html#t:notification/0","title":"MongoosePush.Service.notification/0","type":"type"},{"doc":"","ref":"MongoosePush.Service.html#t:options/0","title":"MongoosePush.Service.options/0","type":"type"},{"doc":"APNS (apple Push Notification Service) service provider implementation.","ref":"MongoosePush.Service.APNS.html","title":"MongoosePush.Service.APNS","type":"module"},{"doc":"Callback implementation for MongoosePush.Service.choose_pool/2.","ref":"MongoosePush.Service.APNS.html#choose_pool/2","title":"MongoosePush.Service.APNS.choose_pool/2","type":"function"},{"doc":"Callback implementation for MongoosePush.Service.prepare_notification/3.","ref":"MongoosePush.Service.APNS.html#prepare_notification/3","title":"MongoosePush.Service.APNS.prepare_notification/3","type":"function"},{"doc":"Callback implementation for MongoosePush.Service.push/4.","ref":"MongoosePush.Service.APNS.html#push/4","title":"MongoosePush.Service.APNS.push/4","type":"function"},{"doc":"Callback implementation for MongoosePush.Service.supervisor_entry/1.","ref":"MongoosePush.Service.APNS.html#supervisor_entry/1","title":"MongoosePush.Service.APNS.supervisor_entry/1","type":"function"},{"doc":"","ref":"MongoosePush.Service.APNS.html#unify_error/1","title":"MongoosePush.Service.APNS.unify_error/1","type":"function"},{"doc":"Module responsible for handling errors returned by APNS service","ref":"MongoosePush.Service.APNS.ErrorHandler.html","title":"MongoosePush.Service.APNS.ErrorHandler","type":"module"},{"doc":"","ref":"MongoosePush.Service.APNS.ErrorHandler.html#translate_error_reason/1","title":"MongoosePush.Service.APNS.ErrorHandler.translate_error_reason/1","type":"function"},{"doc":"Module for storing state of apns APNS configurations, namely default topics","ref":"MongoosePush.Service.APNS.State.html","title":"MongoosePush.Service.APNS.State","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor.","ref":"MongoosePush.Service.APNS.State.html#child_spec/1","title":"MongoosePush.Service.APNS.State.child_spec/1","type":"function"},{"doc":"","ref":"MongoosePush.Service.APNS.State.html#get_default_topic/1","title":"MongoosePush.Service.APNS.State.get_default_topic/1","type":"function"},{"doc":"","ref":"MongoosePush.Service.APNS.State.html#start_link/1","title":"MongoosePush.Service.APNS.State.start_link/1","type":"function"},{"doc":"APNS module supervising Sparrow&#39;s PoolSupervisor and APNS State","ref":"MongoosePush.Service.APNS.Supervisor.html","title":"MongoosePush.Service.APNS.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor.","ref":"MongoosePush.Service.APNS.Supervisor.html#child_spec/1","title":"MongoosePush.Service.APNS.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"MongoosePush.Service.APNS.Supervisor.html#start_link/1","title":"MongoosePush.Service.APNS.Supervisor.start_link/1","type":"function"},{"doc":"FCM (Firebase Cloud Messaging) service provider implementation.","ref":"MongoosePush.Service.FCM.html","title":"MongoosePush.Service.FCM","type":"module"},{"doc":"Callback implementation for MongoosePush.Service.choose_pool/2.","ref":"MongoosePush.Service.FCM.html#choose_pool/2","title":"MongoosePush.Service.FCM.choose_pool/2","type":"function"},{"doc":"Callback implementation for MongoosePush.Service.prepare_notification/3.","ref":"MongoosePush.Service.FCM.html#prepare_notification/3","title":"MongoosePush.Service.FCM.prepare_notification/3","type":"function"},{"doc":"Callback implementation for MongoosePush.Service.push/4.","ref":"MongoosePush.Service.FCM.html#push/4","title":"MongoosePush.Service.FCM.push/4","type":"function"},{"doc":"Callback implementation for MongoosePush.Service.supervisor_entry/1.","ref":"MongoosePush.Service.FCM.html#supervisor_entry/1","title":"MongoosePush.Service.FCM.supervisor_entry/1","type":"function"},{"doc":"","ref":"MongoosePush.Service.FCM.html#unify_error/1","title":"MongoosePush.Service.FCM.unify_error/1","type":"function"},{"doc":"Module responsible for handling errors returned by FCM service.","ref":"MongoosePush.Service.FCM.ErrorHandler.html","title":"MongoosePush.Service.FCM.ErrorHandler","type":"module"},{"doc":"","ref":"MongoosePush.Service.FCM.ErrorHandler.html#translate_error_reason/1","title":"MongoosePush.Service.FCM.ErrorHandler.translate_error_reason/1","type":"function"},{"doc":"This module is responsible for setting up Sparrow&#39;s FCM Supervisor","ref":"MongoosePush.Service.FCM.Pool.Supervisor.html","title":"MongoosePush.Service.FCM.Pool.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor.","ref":"MongoosePush.Service.FCM.Pool.Supervisor.html#child_spec/1","title":"MongoosePush.Service.FCM.Pool.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"MongoosePush.Service.FCM.Pool.Supervisor.html#start_link/1","title":"MongoosePush.Service.FCM.Pool.Supervisor.start_link/1","type":"function"},{"doc":"This module is responsible for worker pools management. It provides several utility functions that help with e.g. selecting workers for given pool of the service.","ref":"MongoosePush.Service.FCM.Pools.html","title":"MongoosePush.Service.FCM.Pools","type":"module"},{"doc":"Returns size of the pool","ref":"MongoosePush.Service.FCM.Pools.html#pool_size/2","title":"MongoosePush.Service.FCM.Pools.pool_size/2","type":"function"},{"doc":"Returns lists of pool names that have selected :mode set","ref":"MongoosePush.Service.FCM.Pools.html#pools_by_mode/0","title":"MongoosePush.Service.FCM.Pools.pools_by_mode/0","type":"function"},{"doc":"Return random worker name for given service and with given :mode set","ref":"MongoosePush.Service.FCM.Pools.html#select_worker/0","title":"MongoosePush.Service.FCM.Pools.select_worker/0","type":"function"},{"doc":"Returns worker name based of the service type, worker name and its id","ref":"MongoosePush.Service.FCM.Pools.html#worker_name/3","title":"MongoosePush.Service.FCM.Pools.worker_name/3","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use MongoosePushWeb, :controller use MongoosePushWeb, :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"MongoosePushWeb.html","title":"MongoosePushWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"MongoosePushWeb.html#__using__/1","title":"MongoosePushWeb.__using__/1","type":"macro"},{"doc":"","ref":"MongoosePushWeb.html#controller/0","title":"MongoosePushWeb.controller/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.html#router/0","title":"MongoosePushWeb.router/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html","title":"MongoosePushWeb.APIv1.NotificationController","type":"module"},{"doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html#open_api_operation/1","title":"MongoosePushWeb.APIv1.NotificationController.open_api_operation/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html#send/2","title":"MongoosePushWeb.APIv1.NotificationController.send/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html#send_operation/0","title":"MongoosePushWeb.APIv1.NotificationController.send_operation/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html","title":"MongoosePushWeb.APIv2.NotificationController","type":"module"},{"doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html#open_api_operation/1","title":"MongoosePushWeb.APIv2.NotificationController.open_api_operation/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html#send/2","title":"MongoosePushWeb.APIv2.NotificationController.send/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html#send_operation/0","title":"MongoosePushWeb.APIv2.NotificationController.send_operation/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html","title":"MongoosePushWeb.APIv3.NotificationController","type":"module"},{"doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html#open_api_operation/1","title":"MongoosePushWeb.APIv3.NotificationController.open_api_operation/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html#send/2","title":"MongoosePushWeb.APIv3.NotificationController.send/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html#send_operation/0","title":"MongoosePushWeb.APIv3.NotificationController.send_operation/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.ApiSpec.html","title":"MongoosePushWeb.ApiSpec","type":"module"},{"doc":"","ref":"MongoosePushWeb.Endpoint.html","title":"MongoosePushWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3.","ref":"MongoosePushWeb.Endpoint.html#broadcast/3","title":"MongoosePushWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3.","ref":"MongoosePushWeb.Endpoint.html#broadcast!/3","title":"MongoosePushWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4.","ref":"MongoosePushWeb.Endpoint.html#broadcast_from/4","title":"MongoosePushWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4.","ref":"MongoosePushWeb.Endpoint.html#broadcast_from!/4","title":"MongoosePushWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2.","ref":"MongoosePushWeb.Endpoint.html#call/2","title":"MongoosePushWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"MongoosePushWeb.Endpoint.html#child_spec/1","title":"MongoosePushWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"MongoosePushWeb.Endpoint.html#config/2","title":"MongoosePushWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"MongoosePushWeb.Endpoint.html#config_change/2","title":"MongoosePushWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"MongoosePushWeb.Endpoint.html#host/0","title":"MongoosePushWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"MongoosePushWeb.Endpoint.html#init/1","title":"MongoosePushWeb.Endpoint.init/1","type":"function"},{"doc":"Instruments the given function. event is the event identifier (usually an atom) that specifies which instrumenting function to call in the instrumenter modules. runtime is metadata to be associated with the event at runtime (e.g., the query being issued if the event to instrument is a DB query). Examples instrument :render_view, %{view: &quot;index.html&quot;}, fn -&gt; render(conn, &quot;index.html&quot;) end","ref":"MongoosePushWeb.Endpoint.html#instrument/3","title":"MongoosePushWeb.Endpoint.instrument/3","type":"macro"},{"doc":"Generates the path information when routing to this endpoint.","ref":"MongoosePushWeb.Endpoint.html#path/1","title":"MongoosePushWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"MongoosePushWeb.Endpoint.html#script_name/0","title":"MongoosePushWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree.","ref":"MongoosePushWeb.Endpoint.html#start_link/1","title":"MongoosePushWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static. Meant to be used for Subresource Integrity with CDNs.","ref":"MongoosePushWeb.Endpoint.html#static_integrity/1","title":"MongoosePushWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity.","ref":"MongoosePushWeb.Endpoint.html#static_lookup/1","title":"MongoosePushWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static.","ref":"MongoosePushWeb.Endpoint.html#static_path/1","title":"MongoosePushWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"MongoosePushWeb.Endpoint.html#static_url/0","title":"MongoosePushWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"MongoosePushWeb.Endpoint.html#struct_url/0","title":"MongoosePushWeb.Endpoint.struct_url/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Endpoint.html#subscribe/1","title":"MongoosePushWeb.Endpoint.subscribe/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.Endpoint.html#subscribe/3","title":"MongoosePushWeb.Endpoint.subscribe/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1.","ref":"MongoosePushWeb.Endpoint.html#unsubscribe/1","title":"MongoosePushWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"MongoosePushWeb.Endpoint.html#url/0","title":"MongoosePushWeb.Endpoint.url/0","type":"function"},{"doc":"Module plug that serves as a wrapper for OpenApiSpex.Plug.CastAndValidate plug, to overcome difficulties with proper message validating. For more details, please refer to update_schema_and_do_call/2 function comment.","ref":"MongoosePushWeb.Plug.CastAndValidate.html","title":"MongoosePushWeb.Plug.CastAndValidate","type":"module"},{"doc":"","ref":"MongoosePushWeb.Plug.CastAndValidate.html#get_operation/1","title":"MongoosePushWeb.Plug.CastAndValidate.get_operation/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.Plug.CastAndValidate.StubAdapter.html","title":"MongoosePushWeb.Plug.CastAndValidate.StubAdapter","type":"module"},{"doc":"","ref":"MongoosePushWeb.Plug.MaybePutSwaggerUI.html","title":"MongoosePushWeb.Plug.MaybePutSwaggerUI","type":"module"},{"doc":"","ref":"MongoosePushWeb.Plug.MaybeRenderSpec.html","title":"MongoosePushWeb.Plug.MaybeRenderSpec","type":"module"},{"doc":"","ref":"MongoosePushWeb.PrometheusMetricsController.html","title":"MongoosePushWeb.PrometheusMetricsController","type":"module"},{"doc":"","ref":"MongoosePushWeb.PrometheusMetricsController.html#send/2","title":"MongoosePushWeb.PrometheusMetricsController.send/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoder.html","title":"MongoosePushWeb.Protocols.RequestDecoder","type":"protocol"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoder.html#decode/1","title":"MongoosePushWeb.Protocols.RequestDecoder.decode/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoder.html#t:t/0","title":"MongoosePushWeb.Protocols.RequestDecoder.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html","title":"MongoosePushWeb.Protocols.RequestDecoderHelper","type":"module"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html#add_optional_fields/2","title":"MongoosePushWeb.Protocols.RequestDecoderHelper.add_optional_fields/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html#maybe_parse_to_atom/2","title":"MongoosePushWeb.Protocols.RequestDecoderHelper.maybe_parse_to_atom/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html#parse_service/1","title":"MongoosePushWeb.Protocols.RequestDecoderHelper.parse_service/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.html","title":"MongoosePushWeb.Router","type":"module"},{"doc":"","ref":"MongoosePushWeb.Router.html#api/2","title":"MongoosePushWeb.Router.api/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"MongoosePushWeb.Router.html#call/2","title":"MongoosePushWeb.Router.call/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"MongoosePushWeb.Router.html#init/1","title":"MongoosePushWeb.Router.init/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.html#swagger_json/2","title":"MongoosePushWeb.Router.swagger_json/2","type":"function"},{"doc":"Module with named helpers generated from MongoosePushWeb.Router.","ref":"MongoosePushWeb.Router.Helpers.html","title":"MongoosePushWeb.Router.Helpers","type":"module"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_put_swagger_ui_path/2","title":"MongoosePushWeb.Router.Helpers.maybe_put_swagger_ui_path/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_put_swagger_ui_path/3","title":"MongoosePushWeb.Router.Helpers.maybe_put_swagger_ui_path/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_put_swagger_ui_url/2","title":"MongoosePushWeb.Router.Helpers.maybe_put_swagger_ui_url/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_put_swagger_ui_url/3","title":"MongoosePushWeb.Router.Helpers.maybe_put_swagger_ui_url/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_render_spec_path/2","title":"MongoosePushWeb.Router.Helpers.maybe_render_spec_path/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_render_spec_path/3","title":"MongoosePushWeb.Router.Helpers.maybe_render_spec_path/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_render_spec_url/2","title":"MongoosePushWeb.Router.Helpers.maybe_render_spec_url/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#maybe_render_spec_url/3","title":"MongoosePushWeb.Router.Helpers.maybe_render_spec_url/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#notification_path/3","title":"MongoosePushWeb.Router.Helpers.notification_path/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#notification_path/4","title":"MongoosePushWeb.Router.Helpers.notification_path/4","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#notification_url/3","title":"MongoosePushWeb.Router.Helpers.notification_url/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#notification_url/4","title":"MongoosePushWeb.Router.Helpers.notification_url/4","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"MongoosePushWeb.Router.Helpers.html#path/2","title":"MongoosePushWeb.Router.Helpers.path/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#prometheus_metrics_path/2","title":"MongoosePushWeb.Router.Helpers.prometheus_metrics_path/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#prometheus_metrics_path/3","title":"MongoosePushWeb.Router.Helpers.prometheus_metrics_path/3","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#prometheus_metrics_url/2","title":"MongoosePushWeb.Router.Helpers.prometheus_metrics_url/2","type":"function"},{"doc":"","ref":"MongoosePushWeb.Router.Helpers.html#prometheus_metrics_url/3","title":"MongoosePushWeb.Router.Helpers.prometheus_metrics_url/3","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"MongoosePushWeb.Router.Helpers.html#static_integrity/2","title":"MongoosePushWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"MongoosePushWeb.Router.Helpers.html#static_path/2","title":"MongoosePushWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"MongoosePushWeb.Router.Helpers.html#static_url/2","title":"MongoosePushWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"MongoosePushWeb.Router.Helpers.html#url/1","title":"MongoosePushWeb.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.html","title":"MongoosePushWeb.Schemas","type":"module"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep","type":"module"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html#alert/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.alert/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html#base/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.base/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html#data/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.data/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.html#schema/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.html#t:t/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.html#schema/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.html#t:t/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.html#schema/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.html#t:t/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.html#schema/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.html#t:t/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.html#schema/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.html#t:t/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.html","title":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.html#schema/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.html#t:t/0","title":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.html","title":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.html#schema/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.html#t:t/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.html","title":"MongoosePushWeb.Schemas.Response.SendNotification.Gone","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.html#schema/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.html#t:t/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.html","title":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.html#schema/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.html#t:t/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.html","title":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.html#schema/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.html#t:t/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.html","title":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.html#schema/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.html#t:t/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.t/0","type":"type"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.html","title":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0.","ref":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.html#schema/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.schema/0","type":"function"},{"doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.html#t:t/0","title":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.t/0","type":"type"},{"doc":"MongoosePush MongoosePush is a simple, RESTful service written in Elixir, providing ability to send push notifications to FCM (Firebase Cloud Messaging) and/or APNS (Apple Push Notification Service) via their HTTP/2 API.","ref":"readme.html","title":"MongoosePush","type":"extras"},{"doc":"Docker Running from DockerHub We provide prebuilt MongoosePush images. Configuration requires either an FCM token, APNS certificates or an APNS token. Depending on your usecase, you can have some or all of them in a standalone MongoosePush instance or using a docker container. For the full configuration you need to set the following directory structure up: priv/ ssl/ rest_cert.pem - The HTTP endpoint certificate rest_key.pem - private key for the HTTP endpoint certificate (has to be unencrypted) apns/ prod_cert.pem - Production APNS app certificate prod_key.pem - Production APNS app certificate&#39;s private key (has to be unencrypted) dev_cert.pem - Development APNS app certificate dev_key.pem - Development APNS app certificate&#39;s private key (has to be unencrypted) token.p8 - APNS authentication token fcm/ token.json - FCM service account JSON file If you want to use APNS token authentication you need to provide token and set key_id and team_id environmental variables. To see how to obtain token and key_id read: https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token_based_connection_to_apns To see how to obtain team_id read: https://www.mobiloud.com/help/knowledge-base/ios-app-transfer/ FCM JSON file can be generated by Firebase console (https://console.firebase.google.com). Go to your project -&gt; Project Settings -&gt; Service accounts -&gt; Generate new private key Assuming that you have the priv directory with all ceriticates and fcm token in current directory, then you may start MongoosePush with the following command: docker run -v `pwd`/priv:/opt/app/priv \\ -e PUSH_HTTPS_CERTFILE=&quot;/opt/app/priv/ssl/rest_cert.pem&quot; \\ -e PUSH_HTTPS_KEYFILE=&quot;/opt/app/priv/ssl/rest_key.pem&quot; \\ -it --rm mongooseim/mongoose-push:latest Building Building docker is really easy, just type: docker build . -t mpush:latest As a result of this command you get access to mpush:latest docker image. You may run it by typing: docker run -it --rm mpush:latest foreground The docker image that you have just built, exposes the port 8443 for the HTTP API of MongoosePush. It contains a VOLUME for path /opt/app - it is handy for injecting APNS and HTTP API certificates since by default the docker image comes with test, self-signed certificates. Configuration (basic) The docker image of MongoosePush contains common, basic configuration that is generated from config/prod.exs. All useful options may be overridden via system environmental variables. Below there&#39;s a full list of the variables you may set while running docker (via docker -e switch), but if there&#39;s something you feel, you need to change other then that, then you need to prepare your own config/prod.exs before image build. Environmental variables to configure production release: Settings for HTTP endpoint: PUSH_HTTPS_BIND_ADDR - Bind IP address of the HTTP endpoint. Default value in prod release is &quot;127.0.0.1&quot;, but docker overrides this with &quot;0.0.0.0&quot; PUSH_HTTPS_PORT - The port of the MongoosePush HTTP endpoint. Please note that docker exposes only 8443 port, so changing this setting is not recommended PUSH_HTTPS_KEYFILE - Path to a PEM keyfile used for HTTP endpoint. This path should be either absolute or relative to root of the release (in the Docker container that&#39;s /opt/app). Default: priv/ssl/fake_key.pem. PUSH_HTTPS_CERTFILE - Path to a PEM certfile used for HTTP endpoint. This path should be either absolute or relative to root of the release (in the Docker container that&#39;s /opt/app). Default: priv/ssl/fake_cert.pem. PUSH_HTTPS_ACCEPTORS - Number of TCP acceptors to start General settings: PUSH_LOGLEVEL - debug/info/warn/error - Log level of the application. info is the default one PUSH_FCM_ENABLED - true/false - Enable or disable FCM support. Enabled by default PUSH_APNS_ENABLED - true/false - Enable or disable APNS support. Enabled by default TLS_SERVER_CERT_VALIDATION - true/false - Enable or distable TLS options for both FCM and APNS. PUSH_OPENAPI_EXPOSE_SPEC - true/false - Enable or disable OpenAPI specification endpoint support. If enabled, it will be available on /swagger.json HTTP path. Disabled by default PUSH_OPENAPI_EXPOSE_UI - true/false - Enable or disable SwaggerUI. If enabled, it will be available on /swaggerui. Disabled by default. Requires PUSH_OPENAPI_EXPOSE_SPEC to also be enabled. Settings for FCM service: PUSH_FCM_ENDPOINT - Hostname of FCM service. Set only for local testing. By default this option points to the Google&#39;s official hostname PUSH_FCM_APP_FILE - Path to FCM service account JSON file. For details look at Running from DockerHub section PUSH_FCM_POOL_SIZE - Connection pool size for FCM service Settings for development APNS service: PUSH_APNS_DEV_ENDPOINT - Hostname of APNS service. Set only for local testing. By default this option points to the Apple&#39;s official hostname PUSH_APNS_DEV_CERT - Path Apple&#39;s development certfile used to communicate with APNS PUSH_APNS_DEV_KEY - Path Apple&#39;s development keyfile used to communicate with APNS PUSH_APNS_DEV_KEY_ID - Key ID generated from Apple&#39;s developer console. For details look at Running from DockerHub section required for token authentication PUSH_APNS_DEV_TEAM_ID - TEAM ID generated from Apple&#39;s developer console. For details look at Running from DockerHub section required for token authenticaton PUSH_APNS_DEV_P8_TOKEN - Token generated from Apple&#39;s developer console. For details look at Running from DockerHub section PUSH_APNS_DEV_USE_2197 - true/false - Enable or disable use of alternative 2197 port for APNS connections in development mode. Disabled by default PUSH_APNS_DEV_POOL_SIZE - Connection pool size for APNS service in development mode PUSH_APNS_DEV_DEFAULT_TOPIC - Default APNS topic to be set if the client app doesn&#39;t specify it with the API call. If this option is not set, MongoosePush will try to extract this value from the provided APNS certificate (the first topic will be assumed default). DEV certificates normally don&#39;t provide any topics, so this option can be safely left unset Settings for production APNS service: PUSH_APNS_PROD_ENDPOINT - Hostname of APNS service. Set only for local testing. By default this option points to the Apple&#39;s official hostname PUSH_APNS_PROD_CERT - Path Apple&#39;s production certfile used to communicate with APNS PUSH_APNS_PROD_KEY - Path Apple&#39;s production keyfile used to communicate with APNS PUSH_APNS_PROD_KEY_ID - Key ID generated from Apple&#39;s developer console. For details look at Running from DockerHub section required for token authentication PUSH_APNS_PROD_TEAM_ID - TEAM ID generated from Apple&#39;s developer console. For details look at Running from DockerHub section required for token authenticaton PUSH_APNS_PROD_P8_TOKEN - Token generated from Apple&#39;s developer console. For details look at Running from DockerHub section PUSH_APNS_PROD_USE_2197 - true/false - Enable or disable use of alternative 2197 port for APNS connections in production mode. Disabled by default PUSH_APNS_PROD_POOL_SIZE - Connection pool size for APNS service in production mode PUSH_APNS_PROD_DEFAULT_TOPIC - Default APNS topic to be set if the client app doesn&#39;t specify it with the API call. If this option is not set, MongoosePush will try to extract this value from the provided APNS certificate (the first topic will be assumed default) Configuration (advanced) Alternatively, the configuration can be done with a TOML configuration file. The file has to be present within the MongoosePush release as var/config.toml. In the Docker Container, this means you need to mount this file under: /opt/app/var/config.toml. Whenever this file is present, the &quot;basic&quot; configuration based on environmental variables is mostly disregarded. Some options may fall back to env variables when the default is needed - if so, this is gonna be explicitly stated in field description. Most importantly, whenever you use TOML configuration, the entire FCM/APNS service configuration has to be made with TOML - environmental variables will be completely disregarded, as this replaces all pool definitions. Using a TOML configuration file enables some features that are hard to represent with environmental variables. Most notable example of that is having multiple connection pools per service, with different auth methods/files. TOML schema General keys general.logging.level (string, optional) - One of: debug/info/warn/error. If not set, falls back to the environmental variable PUSH_LOGLEVEL or its default. general.https.bind.addr (string, optional) - Bind IP address of the HTTPS endpoint. If not set, falls back to the environmental variable PUSH_HTTPS_BIND_ADDR or its default. general.https.bind.port (integer, optional) - Port of the HTTPS endpoint. If not set, falls back to the environmental variable PUSH_HTTPS_PORT or its default. general.https.num_acceptors (integer, optional) - Number of TCP acceptors to start. If not set, falls back to the environmental variable PUSH_HTTPS_ACCEPTORS or its default. general.https.certfile (string, optional) - Path to a PEM certfile used for HTTPS endpoint. If not set, falls back to the environmental variable PUSH_HTTPS_CERTFILE or its default. See PUSH_HTTPS_CERTFILE documentation for more details. general.https.keyfile (string, optional) - Path to a PEM keyfile used for HTTPS endpoint. If not set, falls back to the environmental variable PUSH_HTTPS_KEYFILE or its default. See PUSH_HTTPS_KEYFILE documentation for more details. general.https.cacertfile (string, optional) - Path to a PEM cacertfile used for HTTPS endpoint. If not set, falls back to the environmental variable PUSH_HTTPS_CERTFILE or its default. See PUSH_HTTPS_CERTFILE documentation for more details. general.openapi.expose_spec (boolean, optional) - Enable or disable OpenAPI specification endpoint. If enabled, it will be available on /swagger.json HTTP path. If not set, falls back to the environmental variable PUSH_OPENAPI_EXPOSE_SPEC or its default. general.openapi.expose_ui (boolean, optional) - Enable or disable SwaggerUI. If enabled, it will be available on /swaggerui HTTP path. If not set, falls back to the environmental variable PUSH_OPENAPI_EXPOSE_UI or its default. FCM keys [[service.fcm]] (array, optional) - TOML Array representing a single FCM connection pool. Can have its own connection details like auth, and can be defined with a unique set of tags that can be later used when sending notifications to find a proper connection pool. If no service.fcm array entry is provided, FCM will be disabled. All following TOML keys are valid for any service.fcm array entry: service.fcm.tags (list(string), optional) - List of tags to identify this connection pool. When sending push notifications, you can provide a similar list of tags to &quot;select&quot; a correct connection pool. Notifications will be send only via a connection pool that defines all tags provided along with a notification request. service.fcm.connection.endpoint (string, optional) - Domain/Host of the FCM server. You should leave this not set to use official FCM servers. service.fcm.connection.port (integer, optional) - Port of the FCM server. You should leave this not set to use official FCM servers. service.fcm.connection.count (integer, optional) - Number of connections to open. Default is 5. service.fcm.auth.appfile (string, optional) - Path to the FCM &quot;app file&quot; from the FCM admin console. This path should be either absolute, or relative to root dir of the release (in Docker container that would be /opt/app). Default: priv/fcm/token.json. APNS keys [[service.apns]] (array, optional) - TOML Array representing a single APNS connection pool. Can have its own connection details like auth, and can be defined with a unique set of tags that can be later used when sending notifications to find a proper connection pool. If no service.apns array entry is provided, APNS will be disabled. All following TOML keys are valid for any service.apns array entry: service.apns.tags (list(string), optional) - List of tags to identify this connection pool. When sending push notifications, you can provide a similar list of tags to &quot;select&quot; a correct connection pool. Notifications will be send only via a connection pool that defines all tags provided along with the notification request. service.apns.connection.endpoint (string, optional) - Domain/Host of APNS server. You should leave this not set to use official APNS servers. service.apns.connection.use_2197 (boolean, optional) - Port of APNS server (2197 or default). You should leave this not set to use official APNS servers. service.apns.connection.count (integer, optional) - Number of connections to open. Default is 5. If token authentication is to be used: service.apns.auth.token.key_id (string, required) - &quot;Key ID&quot; for this APNS token. See APNS documentation for more details. service.apns.auth.token.team_id (string, required) - &quot;Team ID&quot; for this APNS token. See APNS documentation for more details. service.apns.auth.token.tokenfile (string, required) - Path to this APNS token P8 file. This path should be either absolute, or relative to root dir of the release (in Docker container that would be /opt/app). If the certificate authentication is to be used: service.apns.auth.certificate.keyfile (string, required) - Path to the PEM encoded keyfile. This path should be either absolute, or relative to root dir of the release (in the Docker container that would be /opt/app). service.apns.auth.certificate.certfile (string, required) - Path to the PEM encoded certfile. This path should be either absolute, or relative to root dir of the release (in the Docker container that would be /opt/app). Please note that only one method of authentication can be used for any given pool. This means that setting service.apns.auth.certificate excludes service.apns.auth.token and vice versa. Providing both will result in a configuration error. Example configuration [general] [general.logging] level = &quot;info&quot; [general.https] bind = { addr = &quot;0.0.0.0&quot;, port = 8443 } num_acceptors = 100 certfile = &quot;priv/ssl/fake_cert.pem&quot; keyfile = &quot;priv/ssl/fake_key.pem&quot; cacertfile = &quot;priv/ssl/fake_cert.pem&quot; [general.openapi] expose_spec = true expose_ui = false [[service.fcm]] tags = [&quot;tag1&quot;, &quot;tag2&quot;] [service.fcm.connection] endpoint = &quot;localhost&quot; port = 443 count = 10 [service.fcm.auth] appfile = &quot;priv/fcm/token.json&quot; [[service.fcm]] tags = [&quot;another1&quot;, &quot;another2&quot;] [service.fcm.connection] endpoint = &quot;localhost&quot; port = 443 count = 10 [service.fcm.auth] appfile = &quot;priv/fcm/token.json&quot; [[service.apns]] mode = &quot;dev&quot; default_topic = &quot;some.topic&quot; tags = [&quot;tag1&quot;, &quot;tag2&quot;] [service.apns.connection] endpoint = &quot;localhost&quot; use_2197 = true count = 10 [service.apns.auth.token] key_id = &quot;some id&quot; team_id = &quot;my team&quot; tokenfile = &quot;priv/apns/token.p8&quot; [[service.apns]] mode = &quot;prod&quot; default_topic = &quot;some.topic&quot; tags = [&quot;tag1&quot;, &quot;tag2&quot;] [service.apns.connection] endpoint = &quot;localhost&quot; use_2197 = false count = 10 [service.apns.auth.certificate] keyfile = &quot;priv/apns/dev_key.pem&quot; certfile = &quot;priv/apns/dev_cert.pem&quot; Local build Perquisites Elixir 1.5+ (http://elixir-lang.org/install.html) Erlang/OTP 19.3+ NOTE: Some Erlang/OTP 20.x releases / builds contain TLS bug that prevents connecting to APNS servers. When building with this Erlang version, please make sure that MongoosePushRuntimeTest test suite passes. It is however highly recommended to build MongoosePush with Erlang/OTP 21.x. Rebar3 (just enter mix local.rebar) Build and run of production release Build step is really easy. Just type in root of the repository: MIX_ENV=prod mix do deps.get, compile, certs.dev, distillery.release After this step you may try to run the service via: _build/prod/rel/mongoose_push/bin/mongoose_push foreground Yeah, I know... It crashed. Running this service is fast and simple but unfortunately you can&#39;t have push notifications without properly configured FCM and/or APNS service. You can find out how to properly configure it in Configuration section of this README. Build and run of development release Build step is really easy. Just type in root of the repository: MIX_ENV=dev mix do deps.get, compile, certs.dev, distillery.release Development release is by default configured to connect to local APNS / FCM mock. This configuration may be changed as needed in config/dev.exs file. For now, let&#39;s just start those mocks so that we can use default dev configuration: docker-compose -f test/docker/docker-compose.mocks.yml up -d After this step you may try to run the service via: _build/dev/rel/mongoose_push/bin/mongoose_push console Running tests One thing that you need to do once before running any tests is generating fake certificates for APNS/HTTPS (it doesn&#39;t matter which MIX_ENV you run this in): mix certs.dev Also, you&#39;ll need to have docker-compose installed and present in path to run any tests. TL;DR # Unit tests MIX_ENV=test mix do test.env.up, test, test.env.down # Integration tests MIX_ENV=integration mix do test.env.up, test, test.env.down Basic tests (non-release) Basic tests require FCM and APNS mock services to be present at the time of running the tests: # We start the mocks mix test.env.up # Now we can just run tests mix test # Optionally we can shut the mocks down. If you want to rerun the tests, you may skip this step do that # you don&#39;t need to re-invoke [`mix test.env.up`](Mix.Tasks.Test.Env.Up.html). Mocks are being reset by each test separately, # so you don&#39;t need to worry about their state. mix test.env.down Integration tests (using production-grade release) Integration tests can be run in exactly the same way as described above for &quot;basic&quot; tests, with one exception: All Mix commands need to be invoked in MIX_ENV=integration environment: # We start the mocks AND MongoosePush docker container. # This may take a few minutes on the first run, as the MongoosePush docker image needs # to build from scratch. Subsequent runs should be much faster. # You need to call each time you make changes in the app code, as MongoosePush # needs to be rebuilt and redeployed! MIX_ENV=integration mix test.env.up # Now we can just run tests MIX_ENV=integration mix test # Optionally we can shut the mocks down. If you want to rerun tests, you may skip this step do that # you don&#39;t need to re-invoke [`mix test.env.up`](Mix.Tasks.Test.Env.Up.html). Mocks are being reset by each test separately, # so you don&#39;t need to worry about their state. MIX_ENV=integration mix test.env.down NOTE: You need to call MIX_ENV=integration mix test.env.up each time you make changes in the app code, as MongoosePush needs to be built and redeployed before running integrations tests! Details on mix test.env.* commands mix test.env.up - runs docker-compose up -d --build with the following compose files: for MIX_ENV=test and MIX_ENV=dev: test/docker/docker-compose.mocks.yml for MIX_ENV=integration: test/docker/docker-compose.mocks.yml and test/docker/docker-compose.mpush.yml mix test.env.down - runs docker-compose down on the same compose files as mix test.env.up mix test.env.wait X - waits up to X milliseconds for the services from mix test.env.up to become available. Prints error if they don&#39;t.","ref":"readme.html#quick-start","title":"MongoosePush - Quick start","type":"extras"},{"doc":"The whole configuration is contained in file config/{prod|dev|test}.exs depending on which MIX_ENV you will be using. You should use MIX_ENV=prod for production installations and MIX_ENV=dev for your development. Anyway, lets take a look on config/dev.exs, part by part. RESTful API configuration config :mongoose_push, MongoosePushWeb.Endpoint, https: [ ip: {127, 0, 0, 1}, port: 8443, keyfile: &quot;priv/ssl/fake_key.pem&quot;, certfile: &quot;priv/ssl/fake_cert.pem&quot;, otp_app: :mongoose_push ] This part of configuration relates only to HTTPS endpoints exposed by MongoosePush. Here you can set a bind IP adress (option: ip), port and paths to your HTTPS TLS certificates. You should ignore other options unless you know what you&#39;re doing (to learn more, explore phoenix documentation). You may entirely skip the mongoose_push config entry to disable HTTPS API and just use this project as an Elixir library. FCM configuration Let&#39;s take a look at sample FCM service configuration: config :mongoose_push, fcm: [ default: [ appfile: &quot;path/to/token.json&quot;, endpoint: &quot;localhost&quot;, pool_size: 5, mode: :prod, tls_opts: [] ] ] This is a definition of a pool - each pool has a name and configuration. It is possible to have multiple named pools with different configuration, which includes pool size, environment mode etc. Currently the only reason you may want to do this is to create separate production and development pools which may be selected by an HTTP client by specifying matching :mode in their push request. Each FCM pool may be configured by setting the following fields: appfile (required) - path to FCM service account JSON file. Details on how to get one are in Running from DockerHub section pool_size (required) - maximum number of used HTTP/2 connections to google&#39;s service mode (either :prod or :dev) - pool&#39;s mode. The HTTP client may select pool used to push a notification by specifying matching option in the request endpoint (optional) - URL override for FCM service. Useful mainly in tests port (optional) - Port number override for FCM service. Useful mainly in tests tags (optional) - a list of tags. Used when choosing pool to match request tags when sending a notification. More details: https://github.com/esl/sparrow#tags tls_opts (optional) - a list of raw options passed to ssl:connect function call while connecting to FCM. When this option is omitted, it will default to set of values that will verify server certificate based on internal CA chain. Providing this option overrides all defaults, effectively disabling certificate validation. Therefore passing this option is not recommended outside dev and test environments. You may entirely skip the FCM config entry to disable FCM support. APNS configuration Lets take a look at sample APNS service configuration: config :mongoose_push, apns: [ dev: [ cert: &quot;priv/apns/dev_cert.pem&quot;, key: &quot;priv/apns/dev_key.pem&quot;, mode: :dev, use_2197: false, pool_size: 5, tls_opts: [] ], prod: [ cert: &quot;priv/apns/prod_cert.pem&quot;, key: &quot;priv/apns/prod_key.pem&quot;, mode: :prod, use_2197: false, pool_size: 5, tls_opts: [] ] ] Just like for FCM, at the top level we can specify the named pools that have different configurations. For APNS this is especially useful since Apple delivers different APS certificates for development and production use. The HTTP client can select a named pool by providing a matching :mode in the HTTP request. Each APNS pool may be configured by setting the following fields: cert (required) - relative path to APNS PEM certificate issued by Apple. This certificate have to be somewhere in priv directory key (required) - relative path to PEM private key for APNS certificate issued by Apple. This file have to be somewhere in priv directory pool_size (required) - maximum number of used HTTP/2 connections to google&#39;s service mode (either :prod or :dev) - pool&#39;s mode. The HTTP client may select pool used to push a notification by specifying matching option in the request endpoint (optional) - URL override for APNS service. Useful mainly in tests port (optional) - Port number override for APNS service. Useful mainly in tests use_2197 (optional true or false) - whether use alternative port for APNS: 2197 tags (optional) - a list of tags. Used when choosing pool to match request tags when sending a notification. More details: https://github.com/esl/sparrow#tags tls_opts (optional) - a list of raw options passed to ssl:connect function call while connecting to APNS. When this option is omitted, it will default to set of values that will verify server certificate based on internal CA chain. Providing this option overrides all defaults, effectively disabling certificate validation. Therefore passing this option is not recommended outside dev and test environments. You may entirely skip the APNS config entry to disable APNS support. Converting APNS files If you happen to have APNS files in pkcs12 format (.p12 or .pfx extenstion) you need to convert them to PEM format which is understood by MongoosePush. Belowe you can find sample openssl commands which may be helpful. Get cert from pkcs12 file openssl pkcs12 -in YourAPNS.p12 -out YourCERT.pem -nodes -nokeys Get key from pkcs12 file openssl pkcs12 -in YourAPNS.p12 -out YourKEY.pem -nodes -nocerts","ref":"readme.html#configuration","title":"MongoosePush - Configuration","type":"extras"},{"doc":"Swagger If for some reason you need Swagger spec for this RESTful service, there is a swagger endpoint available via an HTTP path /swagger.json Just tell me what to send already Request There is only one endpoint at this moment: POST /{version}/notification/{device_id} As you can imagine, {device_id} should be replaced with device ID/Token generated by your push notification provider (FCM or APNS). The notification should be sent as JSON payload of this request. Minimal JSON request could be like this: { &quot;service&quot;: &quot;apns&quot;, &quot;alert&quot;: { &quot;body&quot;: &quot;notification&#39;s text body&quot;, &quot;title&quot;: &quot;notification&#39;s title&quot; } } The full list of options contains the following: service (required, apns or fcm) - push notifications provider to be used for this notification mode (optional, prod (default) or dev) - allows for selecting named pool configured in MongoosePush priority (optional) - Either normal or high. Those values are used without changes for FCM. For APNS however, normal maps to priority 5, while high maps to priority 10. Please refer to FCM / APNS documentation for more details on those values. By default priority is not set at all, therefore the push notification service decides which value is used by default. time_to_live (optional) - Maximum lifespan of an FCM notification. For more details, please, refer to the official FCM documentation. mutable_content (optional, true / false (default)) - Only applicable to APNS. Sets &quot;mutable-content=1&quot; in APNS payload. topic (optional, APNS specific) - if APNS certificate configured in MongoosePush allows for multiple applications, this field selects the application. Please refer to APNS documentation for more datails tags (optional) - a list of tags used to choose a pool with matching tags. To see how tags work read: https://github.com/esl/sparrow#tags data (optional) - custom JSON structure sent to the target device. For APNS, all keys form this stucture are merged into highest level APS message (the one that holds &#39;aps&#39; key), while for FCM the whole data json stucture is sent as FCM&#39;s data payload along with notification. alert (optional) - JSON stucture that if provided will send non-silent notification with the following fields: body (required) - text body of notification title (required) - short title of notification click_action (optional) - for FCM its activity to run when notification is clicked. For APNS its category to invoke. Please refer to Android/iOS documentation for more details about this action tag (optional, FCM specific) - notifications aggregation key badge (optional, APNS specific) - unread notifications count sound (optional) - sound that should be play when notification arrives. Please refer to FCM / APNS documentation for more details. Please note that either alert and data has to be provided (also can be both). If you only specify alert, the request will result in classic, simple notification. If you only specify data, the request will result in &quot;silent&quot; notification, i.e. the client will receive the data and will be able to decide whether notification shall be shown and how should be shown to the user. If you specify both alert and data, target device will receive both notification and the custom data payload to process. Description of the possible server responses 200 &quot;OK&quot; - the request was successful. 400 {&quot;reason&quot; : &quot;invalid_request&quot;|&quot;no_matching_pool&quot;} - the request was invalid. 410 {&quot;reason&quot; : &quot;unregistered&quot;} - the device was not registered. 413 {&quot;reason&quot; : &quot;payload_too_large&quot;} - the payload was too large. 429 {&quot;reason&quot; : &quot;too_many_requests&quot;} - there were too many requests to the server. 503 {&quot;reason&quot; : &quot;service_internal&quot;|&quot;internal_config&quot;|&quot;unspecified&quot;} - the internal service or configuration error occured. 520 {&quot;reason&quot; : &quot;unspecified&quot;} - the unknown error occured. 500 {&quot;reason&quot; : reason} - the server internal error occured, specified by reason. Metrics MongoosePush 2.1 provides metrics in the Prometheus format on the /metrics endpoint. This is a breaking change compared to previous releases. Existing dashboards will need to be updated. It is important to know that metrics are created inside MongoosePush only when a certain event happens. This may mean that a freshly started MongoosePush node will not have all the possible metrics available yet. Available metrics Histograms For more details about the histogram metric type please go to https://prometheus.io/docs/concepts/metric_types/#histogram Notification sent time mongoose_push_notification_send_time_microsecond_bucket{error_category=${CATEGORY},error_reason=${REASON},service=${SERVICE},status=${STATUS},le=${LE}} mongoose_push_notification_send_time_microsecond_sum{error_category=${CATEGORY},error_reason=${REASON},service=${SERVICE},status=${STATUS}} mongoose_push_notification_send_time_microsecond_count{error_category=${CATEGORY},error_reason=${REASON},service=${SERVICE},status=${STATUS}} Where: STATUS is &quot;success&quot; for the successful notifications or &quot;error&quot; in all other cases SERVICE is either &quot;apns&quot; or &quot;fcm&quot; CATEGORY is an arbitrary error category term (in case of status=&quot;error&quot;) or an empty string (when status=&quot;success&quot;) REASON is an arbitrary error reason term (in case of status=&quot;error&quot;) or an empty string (when status=&quot;success&quot;) LE defines the upper inclusive bound (less than or equal) values for buckets, currently 1000, 10_000, 25_000, 50_000, 100_000, 250_000, 500_000, 1000_000 or +Inf This histogram metric shows the distribution of times needed to: Select a worker (this may include waiting time when all workers are busy). Send a request. Get a response from push notifications provider. HTTP/2 requests sparrow_h_worker_handle_duration_microsecond_bucket{le=${LE}} sparrow_h_worker_handle_duration_microsecond_sum{le=${LE}} sparrow_h_worker_handle_duration_microsecond_count{le=${LE}} Where: LE defines the upper inclusive bound (less than or equal) values for buckets, currently 1000, 10_000, 25_000, 50_000, 100_000, 250_000, 500_000, 1000_000 or +Inf This histogram metric shows the distribution of times needed to handle and send a request. This includes: Open a new stream within an already established channel. Send a request. NOTE A bucket of value 250_000 will keep the count of measurements that are less than or equal to 250_000. A measurement of value 51_836 will be added to all the buckets where the upper bound is greater than 51_836. In this case these are buckets 100_000, 250_000, 500_000, 1000_000 and +Inf Counters mongoose_push_supervisor_init_count{service=${SERVICE}} - Counts the number of push notification service supervisor starts. The SERVICE variable can take &quot;apns&quot; or &quot;fcm&quot; as a value. This metric is updated when MongoosePush starts, and later on when the underlying supervision tree is terminated and the error is propagated to the main application supervisor. mongoose_push_apns_state_init_count - Counts the number of APNS state initialisations. mongoose_push_apns_state_terminate_count - Counts the number of APNS state terminations. mongoose_push_apns_state_get_default_topic_count - Counts the number of default topic reads from cache. sparrow_pools_warden_pools_count - Counts the number of worker pools. sparrow_pools_warden_workers_count{pool=${POOL}} - Counts the number of workers operated by a given worker POOL. sparrow_h_worker_init_count - Counts the number of h2_worker starts. sparrow_h_worker_terminate_count - Counts the number of h2_worker terminations. sparrow_h_worker_conn_success_count - Counts the number of successful h2_worker connections. sparrow_h_worker_conn_fail_count - Counts the number of failed h2_worker connections. sparrow_h_worker_conn_lost_count - Counts the number of lost h2_worker connections. sparrow_h_worker_request_success_count - Counts the number of successful h2_worker requests. sparrow_h_worker_request_error_count - Counts the number of failed h2_worker requests. How to quickly see all metrics curl -k https://127.0.0.1:8443/metrics The above command assumes that MongoosePush runs on localhost and listens on port 8443. Please, mind the HTTPS protocol, metrics are hosted on the same port than all the other API endpoints. Prometheus configuration When configuring Prometheus, it&#39;s important to: set the scheme to https since MongoosePush exposes /metrics path encrypted endpoint (HTTPS) set the insecure_skip_verify to true if the default self-signed certificates are used scrape_configs: - job_name: &#39;mongoose-push&#39; scheme: &#39;https&#39; #MongoosePush exposes encrypted endpoint - HTTPS tls_config: #The default certs used by MongoosePush are self-signed insecure_skip_verify: true #For checking purposes we can ignore certs verification static_configs: - targets: [&#39;mongoose-push:8443&#39;] labels: group: &#39;production&#39;","ref":"readme.html#restful-api","title":"MongoosePush - RESTful API","type":"extras"}]