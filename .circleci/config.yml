version: 2.1
jobs:
  build:
    docker:
      - image: circleci/elixir:1.8.1
        environment:
          MIX_ENV: test

    working_directory: ~/app

    steps:
      - checkout

      - run: mix local.hex --force
      - run: mix local.rebar --force

      - run: mix do deps.get, compile
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - restore_cache:
          keys:
            - plt-cache-{{ checksum ".version_file" }}-{{ checksum "mix.lock" }}
      - run: mix dialyzer --plt
      - save_cache:
          key: plt-cache-{{ checksum ".version_file"  }}-{{ checksum "mix.lock" }}
          paths:
            - _build
            - deps
            - ~/.mix
      - save_cache:
          key: mix-cache-{{ .Branch }}-{{ .Revision }}
          paths:
                - deps
                - ~/.mix
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}
          paths: "_build"

  dialyzer:
    docker:
      - image: circleci/elixir:1.8.1
        environment:
          MIX_ENV: test

    working_directory: ~/app

    steps:
      - checkout
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - restore_cache:
          keys:
            - plt-cache-{{ checksum ".version_file" }}-{{ checksum "mix.lock" }}
      - run:
          name: Execute dialyzer
          command: mix deps.get && mix dialyzer --halt-exit-status

  release:
    docker:
      - image: circleci/elixir:1.8.1
        environment:
          MIX_ENV: prod

    working_directory: ~/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - mix-cache-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}
      - run: mix release
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - "_build"
            - "mongoose_push.tar.gz"


  test:
    docker:
      - image: circleci/elixir:1.8.1
        environment:
          MIX_ENV: test
      - image: rslota/fcm-http2-mock-server
      - image: mobify/apns-http2-mock-server

    working_directory: ~/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - mix-cache-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Wait for FCM mock
          command: dockerize -wait tcp://localhost:443 -timeout 1m
      - run:
          name: Wait for APNS mock
          command: dockerize -wait tcp://localhost:2197 -timeout 1m

      - run: mix do certs.dev, coveralls.circle

      - store_artifacts:
          path: cover
          destination: coverage_results

  format_check:
    docker:
      - image: circleci/elixir:1.8.1
        environment:
          MIX_ENV: test

    working_directory: ~/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - mix-cache-{{ .Branch }}-{{ .Revision }}

      - run: mix format --check-formatted

  deploy_docker_image:
    docker:
      - image: circleci/python:3.7.3-stretch
        environment:
          MIX_ENV: prod

    working_directory: ~/app

    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Generate image tag
          command: |
             set -x
             if [ -n "$CIRCLE_TAG" ]; then
               DOCKER_TAG="$CIRCLE_TAG"
             elif [ "$CIRCLE_BRANCH" == "master" ]; then
               DOCKER_TAG="${CIRCLE_SHA1:0:7}"
             else
               DOCKER_TAG=`echo $CIRCLE_BRANCH | sed 's,/,_,g'`
             fi
             env | sort
             echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV
             echo "export DOCKER_IMAGE=mongoose-push" >> $BASH_ENV

      - run:
          name: Login to DockerHub
          command: docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASS}"

      - run:
          name: Build docker image
          command: docker build -f Dockerfile.release --build-arg MIX_ENV=prod -t $DOCKER_IMAGE:$DOCKER_TAG .
      - run:
          name: Tag and push docker image
          command: |
             set -x
             docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:$DOCKER_TAG
             docker push $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:$DOCKER_TAG
             if [ "$CIRCLE_BRANCH" == "master" ]; then
               docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:latest
               docker push $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:latest
             fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - format_check:
          requires:
            - build
      - dialyzer:
          requires:
            - build
      - test:
          requires:
            - build
      - release:
          requires:
            - build
      - deploy_docker_image:
          requires:
            - test
            - release
          filters:
            tags:
              only: /.*/
